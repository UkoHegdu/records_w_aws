openapi: 3.0.0
servers:
  - description: Local Dev
    url: http://localhost:3000
info:
  title: Record Watcher
  description: Watches Trackmania Records
  version: "1.0.0"
  contact:
    email: fantomass@gmail.com
tags:
  - name: Health
    description: The health route
  - name: Records
    description: Fetch latest driven records
  - name: RecordWatcher
    description: Routes for watching/unwatching map records
paths:
  /health:
    get:
      tags:
        - Health
      summary: Application health
      operationId: healthz
      description: Check health of the application
      responses:
        "200":
          description: Application is healthy
          content:
            application/json:
              schema:
                required:
                  - ok
                properties:
                  ok:
                    type: boolean
                    example: true
                  environment:
                    type: string
                    example: "development"

  /api/v1/records/latest:
    get:
      tags:
        - Records
      summary: Get latest records for a map
      operationId: getLatestRecords
      description: Returns all driven records for a map within a time period
      parameters:
        - in: query
          name: mapUid
          required: true
          schema:
            type: string
            example: "wQZaLfhFFBMhAuO0FRdVVLMOzo4"
        - in: query
          name: period
          required: true
          schema:
            type: string
            enum: [1d, 1w, 1m]
            example: 1w
      responses:
        "200":
          description: List of records
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    time:
                      type: string
                      format: date-time
                    player:
                      type: string
                      example: "player123"
                    recordTime:
                      type: number
                      example: 58472

  /api/v1/recordWatcher:
    get:
      tags:
        - RecordWatcher
      summary: List watched maps for a user
      operationId: listWatchedMaps
      description: Returns the maps a user is watching by their email
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
            format: email
            example: user@example.com
      responses:
        "200":
          description: List of watched maps
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    mapUid:
                      type: string
                      example: "xyz-map-uid"
                    addedAt:
                      type: string
                      format: date-time

    post:
      tags:
        - RecordWatcher
      summary: Add a map to the watch list
      operationId: addWatchedMap
      description: Adds a map UID and email combo to the watch list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - mapUid
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                mapUid:
                  type: string
                  example: xyz-map-uid
      responses:
        "201":
          description: Successfully added to watch list
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Map successfully added to watch list"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    DefaultError:
      description: Default Error response.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DefaultError"
    ValidationError:
      description: Validation Error response.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationError"
  schemas:
    DefaultError:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - message
          properties:
            message:
              type: string
              example: "There was an error processing your request"
            code:
              type: string
              example: ERR-NF

    ValidationError:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - message
            - errors
          properties:
            message:
              type: string
              example: Validation error
            errors:
              type: array
              items:
                type: object
                required:
                  - message
                  - type
                properties:
                  message:
                    type: string
                    example: map uid is required
                  type:
                    type: string
                    example: any.required
                  code:
                    type: string
                    example: ERR-VLD

    Post:
      type: object
      required:
        - email
        - mapUid
      properties:
        email:
          type: string
          example: email@provider.com
        mapUid:
          type: string
          example: wQZaLfhFFBMhAuO0FRdVVLMOzo4
